{
  "openapi" : "3.1.0",
  "components" : {
    "schemas" : {
      "ChatMessageRecord" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/ChatMessageType"
          },
          "text" : {
            "type" : "string"
          },
          "timestamp" : {
            "$ref" : "#/components/schemas/Instant"
          },
          "sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RagSourceRecord"
            }
          },
          "modelUID" : {
            "type" : "string"
          }
        }
      },
      "ChatMessageType" : {
        "type" : "string",
        "enum" : [ "SYSTEM", "USER", "AI", "TOOL_EXECUTION_RESULT", "CUSTOM" ]
      },
      "ChatModelContainer" : {
        "type" : "object",
        "properties" : {
          "uid" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "provider" : {
            "$ref" : "#/components/schemas/ChatModelProvider"
          }
        }
      },
      "ChatModelProvider" : {
        "type" : "string",
        "enum" : [ "AZURE", "GOOGLE_GEMINI", "MISTRAL", "OLLAMA", "OPENAI" ]
      },
      "ChatResponseRecord" : {
        "type" : "object",
        "properties" : {
          "response" : {
            "type" : "string"
          },
          "sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RagSourceRecord"
            }
          }
        }
      },
      "InfoDTO" : {
        "type" : "object",
        "properties" : {
          "security" : {
            "$ref" : "#/components/schemas/SecurityInfoDTO"
          },
          "oidc" : {
            "$ref" : "#/components/schemas/OidcInfoDTO"
          },
          "imprintLink" : {
            "type" : "string"
          },
          "privacyPolicyLink" : {
            "type" : "string"
          }
        }
      },
      "IngestionStatus" : {
        "type" : "string",
        "enum" : [ "PENDING", "SUCCEEDED", "FAILED" ]
      },
      "Instant" : {
        "type" : "string",
        "format" : "date-time",
        "examples" : [ "2022-03-10T16:15:50Z" ]
      },
      "KnowledgeRecord" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/KnowledgeType"
          },
          "id" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "checksum" : {
            "type" : "string"
          },
          "ingestionStatus" : {
            "$ref" : "#/components/schemas/IngestionStatus"
          },
          "tokenCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/Instant"
          },
          "lastUpdatedAt" : {
            "$ref" : "#/components/schemas/Instant"
          },
          "contentType" : {
            "type" : "string"
          },
          "permissions" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Permission"
            }
          },
          "label" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "source" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "KnowledgeType" : {
        "type" : "string",
        "enum" : [ "FILE", "WEBLINK" ]
      },
      "OidcInfoDTO" : {
        "type" : "object",
        "properties" : {
          "authServerUrl" : {
            "type" : "string"
          },
          "clientId" : {
            "type" : "string"
          },
          "authorizationPath" : {
            "type" : "string"
          },
          "logoutPath" : {
            "type" : "string"
          },
          "tokenPath" : {
            "type" : "string"
          },
          "audience" : {
            "type" : "string"
          }
        }
      },
      "Permission" : {
        "type" : "string",
        "enum" : [ "OWNER", "READWRITE", "READONLY", "NONE" ]
      },
      "RagSourceRecord" : {
        "type" : "object",
        "properties" : {
          "knowledgeId" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "embeddingId" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "page" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "string"
          }
        }
      },
      "SecurityInfoDTO" : {
        "type" : "object",
        "properties" : {
          "anonymousUserEnabled" : {
            "type" : "boolean"
          },
          "anonymousUserSessionTimeout" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Session" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/UUID"
          },
          "createdAt" : {
            "$ref" : "#/components/schemas/Instant"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "UUID" : {
        "type" : "string",
        "format" : "uuid",
        "pattern" : "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      },
      "UserInfoDTO" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "roles" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          },
          "anonymous" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "SecurityScheme" : {
        "type" : "openIdConnect",
        "openIdConnectUrl" : "https://sqe-keycloak.k8s.ilt-dmz.iosb.fraunhofer.de/realms/pse-llamara/.well-known/openid-configuration",
        "description" : "Authentication"
      }
    }
  },
  "paths" : {
    "/rest" : {
      "get" : {
        "summary" : "Get configuration required by the frontend.",
        "operationId" : "configuration",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InfoDTO"
                }
              }
            }
          }
        },
        "tags" : [ "Root Resource" ]
      }
    },
    "/rest/chat/models" : {
      "get" : {
        "summary" : "Get the available chat models.",
        "operationId" : "getModels",
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatModelContainer"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/prompt" : {
      "post" : {
        "summary" : "Send a prompt to the given chat model.",
        "operationId" : "prompt",
        "parameters" : [ {
          "description" : "ID of the session to use",
          "name" : "sessionId",
          "required" : true,
          "in" : "query",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "UID of the chat model to use",
          "name" : "uid",
          "required" : true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatResponseRecord"
                }
              }
            }
          },
          "404" : {
            "description" : "No chat model or no session with given ID found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/sessions" : {
      "get" : {
        "summary" : "Get all chat sessions.",
        "operationId" : "getSessions",
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Session"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/sessions/create" : {
      "post" : {
        "summary" : "Create a new chat session and get its ID.",
        "operationId" : "createSession",
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Session"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/sessions/{sessionId}" : {
      "delete" : {
        "summary" : "Delete a chat session.",
        "operationId" : "deleteSession",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No session with the given ID found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/sessions/{sessionId}/history" : {
      "get" : {
        "summary" : "Get the chat history for the given session id.",
        "operationId" : "getHistory",
        "parameters" : [ {
          "description" : "UID of the chat history to get",
          "name" : "sessionId",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatMessageRecord"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No session with the given ID found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/sessions/{sessionId}/keep-alive" : {
      "put" : {
        "summary" : "Keeps alive an anonymous session identified by its ID.",
        "operationId" : "keepAliveAnonymousSession",
        "parameters" : [ {
          "description" : "UID of the session to keep alive",
          "name" : "sessionId",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No session with the given ID found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "anonymous_user" ]
        } ]
      }
    },
    "/rest/chat/sessions/{sessionId}/label" : {
      "put" : {
        "summary" : "Set the label of a session identified by its ID.",
        "operationId" : "setSessionLabel",
        "parameters" : [ {
          "description" : "UID of the session to set the label for",
          "name" : "sessionId",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "session label to set",
          "name" : "label",
          "required" : true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request, usually returned when an operation is requested before the user has logged in."
          },
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No session with the given ID found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Chat Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/knowledge" : {
      "get" : {
        "summary" : "Get all knowledge.",
        "operationId" : "getAllKnowledge",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/KnowledgeRecord"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/knowledge/add/file" : {
      "post" : {
        "summary" : "Add a set of files to the knowledge.",
        "description" : "If a file is empty, it is skipped.",
        "operationId" : "addFileSource",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "files" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "binary"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK. Returns the ids of the added knowledge.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UUID"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "File upload is invalid."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/knowledge/retry/{id}/ingestion" : {
      "put" : {
        "summary" : "Retry the failed ingestion of a single knowledge identified by it ID.",
        "operationId" : "retryFailedIngestion",
        "parameters" : [ {
          "description" : "UID of the knowledge to retry the ingestion for",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK."
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/knowledge/update/{id}/file" : {
      "put" : {
        "summary" : "Update the file source of a single knowledge identified by it ID.",
        "description" : "If the file is empty, it is skipped.",
        "operationId" : "updateFileSource",
        "parameters" : [ {
          "description" : "UID of the knowledge to update",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK."
          },
          "400" : {
            "description" : "File upload is invalid."
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/knowledge/{id}" : {
      "get" : {
        "summary" : "Get a single knowledge.",
        "operationId" : "getKnowledge",
        "parameters" : [ {
          "description" : "UID of the knowledge to get",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KnowledgeRecord"
                }
              }
            }
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      },
      "delete" : {
        "summary" : "Delete a single knowledge.",
        "operationId" : "deleteKnowledge",
        "parameters" : [ {
          "description" : "UID of the knowledge to delete",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/knowledge/{id}/file" : {
      "get" : {
        "summary" : "Get the source file of a single knowledge.",
        "operationId" : "getKnowledgeFile",
        "parameters" : [ {
          "description" : "UID of the knowledge to get the source file of",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "name" : "If-None-Match",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : { }
            }
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      }
    },
    "/rest/knowledge/{id}/label" : {
      "put" : {
        "summary" : "Set the label of a single knowledge identified by its ID.",
        "operationId" : "setKnowledgeLabel",
        "parameters" : [ {
          "description" : "UID of the knowledge to set the label for",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "the knowledge label to set",
          "name" : "label",
          "required" : true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/knowledge/{id}/permission/{username}" : {
      "put" : {
        "summary" : "Set a user's permission for a single knowledge identified by its ID.",
        "operationId" : "setKnowledgePermission",
        "parameters" : [ {
          "description" : "UID of the knowledge set permission for",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "name of user to set permission for",
          "name" : "username",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "permission to set",
          "content" : {
            "text/plain" : {
              "schema" : {
                "enum" : [ "READWRITE", "READONLY" ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Illegal permission modification"
          },
          "404" : {
            "description" : "No knowledge with the given id found or no user with the given username found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      },
      "delete" : {
        "summary" : "Remove a user's permissions from a single knowledge identified by its ID.",
        "operationId" : "removeKnowledgePermission",
        "parameters" : [ {
          "description" : "UID of the knowledge to remove the permission from",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "name of user to remove permission for",
          "name" : "username",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No knowledge with the given id found or no user with the given username found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/knowledge/{id}/tag" : {
      "delete" : {
        "summary" : "Remove a tag from a single knowledge identified by its ID.",
        "operationId" : "removeKnowledgeTag",
        "parameters" : [ {
          "description" : "UID of the knowledge to which the tag should be removed",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "tag to remove",
          "name" : "tag",
          "required" : true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      },
      "put" : {
        "summary" : "Add a tag to a single knowledge identified by its ID.",
        "operationId" : "addKnowledgeTag",
        "parameters" : [ {
          "description" : "UID of the knowledge to which the tag should be added",
          "name" : "id",
          "required" : true,
          "in" : "path",
          "schema" : {
            "$ref" : "#/components/schemas/UUID"
          }
        }, {
          "description" : "tag to add",
          "name" : "tag",
          "required" : true,
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "No knowledge with the given id found."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "Knowledge Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    },
    "/rest/user" : {
      "get" : {
        "summary" : "Login and get the user information based on the OIDC token.",
        "operationId" : "login",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserInfoDTO"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "User Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user", "anonymous_user" ]
        } ]
      },
      "delete" : {
        "summary" : "Delete all data for the user.",
        "operationId" : "deleteUserData",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request. Returned when an operation is requested before the user is logged in."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "403" : {
            "description" : "Not Allowed"
          }
        },
        "tags" : [ "User Resource" ],
        "security" : [ {
          "SecurityScheme" : [ "admin", "user" ]
        } ]
      }
    }
  },
  "info" : {
    "title" : "LLAMARA API",
    "version" : "0.8.1-SNAPSHOT",
    "description" : "The official REST API for LLAMARA - the Large Language Assistant for Model Augmented Retrieval and Analysis - an LLM-based assistant for information retrieval from a provided knowledge base.",
    "contact" : {
      "name" : "LLAMARA GitHub Organization",
      "url" : "https://github.com/llamara-ai"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Auto generated value"
  }, {
    "url" : "http://0.0.0.0:8080",
    "description" : "Auto generated value"
  } ]
}
