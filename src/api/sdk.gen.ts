// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ConfigurationError, ConfigurationResponse, GetModelsError, GetModelsResponse, PromptData, PromptError, PromptResponse, GetSessionsError, GetSessionsResponse, CreateSessionError, CreateSessionResponse, DeleteSessionData, DeleteSessionError, DeleteSessionResponse, GetHistoryData, GetHistoryError, GetHistoryResponse, GetAllKnowledgeError, GetAllKnowledgeResponse, AddFileSourceData, AddFileSourceError, AddFileSourceResponse, UpdateFileSourceData, UpdateFileSourceError, UpdateFileSourceResponse, GetKnowledgeData, GetKnowledgeError, GetKnowledgeResponse, DeleteKnowledgeData, DeleteKnowledgeError, DeleteKnowledgeResponse, GetKnowledgeFileData, GetKnowledgeFileError, GetKnowledgeFileResponse, LoginError, LoginResponse, DeleteUserDataError, DeleteUserDataResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get configuration required by the frontend.
 */
export const configuration = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationResponse, ConfigurationError, ThrowOnError>({
        ...options,
        url: '/rest'
    });
};

/**
 * Get the available chat models.
 */
export const getModels = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetModelsResponse, GetModelsError, ThrowOnError>({
        ...options,
        url: '/rest/chat/models'
    });
};

/**
 * Send a prompt to the given chat model.
 */
export const prompt = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PromptData, ThrowOnError>) => {
    return (options?.client ?? client).post<PromptResponse, PromptError, ThrowOnError>({
        ...options,
        url: '/rest/chat/prompt'
    });
};

/**
 * Get all chat sessions.
 */
export const getSessions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSessionsResponse, GetSessionsError, ThrowOnError>({
        ...options,
        url: '/rest/chat/sessions'
    });
};

/**
 * Create a new chat session and get its ID.
 */
export const createSession = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).put<CreateSessionResponse, CreateSessionError, ThrowOnError>({
        ...options,
        url: '/rest/chat/sessions/create'
    });
};

/**
 * Delete a chat session.
 */
export const deleteSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteSessionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSessionResponse, DeleteSessionError, ThrowOnError>({
        ...options,
        url: '/rest/chat/sessions/{sessionId}'
    });
};

/**
 * Get the chat history for the given session id.
 */
export const getHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHistoryResponse, GetHistoryError, ThrowOnError>({
        ...options,
        url: '/rest/chat/sessions/{sessionId}/history'
    });
};

/**
 * Get all knowledge.
 */
export const getAllKnowledge = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllKnowledgeResponse, GetAllKnowledgeError, ThrowOnError>({
        ...options,
        url: '/rest/knowledge'
    });
};

/**
 * Add a set of files to the knowledge.
 * If a file is empty, it is skipped.
 */
export const addFileSource = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AddFileSourceData, ThrowOnError>) => {
    return (options?.client ?? client).put<AddFileSourceResponse, AddFileSourceError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/rest/knowledge/add/file'
    });
};

/**
 * Update the file source of a single knowledge identified by it ID.
 * If the file is empty, it is skipped.
 */
export const updateFileSource = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateFileSourceData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateFileSourceResponse, UpdateFileSourceError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/rest/knowledge/update/{id}/file'
    });
};

/**
 * Get a single knowledge.
 */
export const getKnowledge = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetKnowledgeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKnowledgeResponse, GetKnowledgeError, ThrowOnError>({
        ...options,
        url: '/rest/knowledge/{id}'
    });
};

/**
 * Delete a single knowledge.
 */
export const deleteKnowledge = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteKnowledgeData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteKnowledgeResponse, DeleteKnowledgeError, ThrowOnError>({
        ...options,
        url: '/rest/knowledge/{id}'
    });
};

/**
 * Get the source file of a single knowledge.
 */
export const getKnowledgeFile = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetKnowledgeFileData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKnowledgeFileResponse, GetKnowledgeFileError, ThrowOnError>({
        ...options,
        url: '/rest/knowledge/{id}/file'
    });
};

/**
 * Login and get the user information based on the OIDC token.
 */
export const login = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<LoginResponse, LoginError, ThrowOnError>({
        ...options,
        url: '/rest/user'
    });
};

/**
 * Delete all data for the user.
 */
export const deleteUserData = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserDataResponse, DeleteUserDataError, ThrowOnError>({
        ...options,
        url: '/rest/user'
    });
};