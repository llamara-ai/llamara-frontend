// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ConfigurationData, ConfigurationResponse, GetModelsData, GetModelsResponse, PromptData, PromptResponse, GetSessionsData, GetSessionsResponse, CreateSessionData, CreateSessionResponse, DeleteSessionData, GetHistoryData, GetHistoryResponse, KeepAliveAnonymousSessionData, SetSessionLabelData, GetAllKnowledgeData, GetAllKnowledgeResponse, AddFileSourceData, AddFileSourceResponse, RetryFailedIngestionData, UpdateFileSourceData, DeleteKnowledgeData, GetKnowledgeData, GetKnowledgeResponse, GetKnowledgeFileData, GetKnowledgeFileResponse, SetKnowledgeLabelData, RemoveKnowledgePermissionData, SetKnowledgePermissionData, RemoveKnowledgeTagData, AddKnowledgeTagData, DeleteUserDataData, LoginData, LoginResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { getSessionsResponseTransformer, createSessionResponseTransformer, getHistoryResponseTransformer, getAllKnowledgeResponseTransformer, getKnowledgeResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get configuration required by the frontend.
 */
export const configuration = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationResponse, unknown, ThrowOnError>({
        url: '/rest',
        ...options
    });
};

/**
 * Get the available chat models.
 */
export const getModels = <ThrowOnError extends boolean = false>(options?: Options<GetModelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetModelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/chat/models',
        ...options
    });
};

/**
 * Send a prompt to the given chat model.
 */
export const prompt = <ThrowOnError extends boolean = false>(options: Options<PromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PromptResponse, unknown, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/chat/prompt',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Get all chat sessions.
 */
export const getSessions = <ThrowOnError extends boolean = false>(options?: Options<GetSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseTransformer: getSessionsResponseTransformer,
        url: '/rest/chat/sessions',
        ...options
    });
};

/**
 * Create a new chat session and get its ID.
 */
export const createSession = <ThrowOnError extends boolean = false>(options?: Options<CreateSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseTransformer: createSessionResponseTransformer,
        url: '/rest/chat/sessions/create',
        ...options
    });
};

/**
 * Delete a chat session.
 */
export const deleteSession = <ThrowOnError extends boolean = false>(options: Options<DeleteSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/chat/sessions/{sessionId}',
        ...options
    });
};

/**
 * Get the chat history for the given session id.
 */
export const getHistory = <ThrowOnError extends boolean = false>(options: Options<GetHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHistoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseTransformer: getHistoryResponseTransformer,
        url: '/rest/chat/sessions/{sessionId}/history',
        ...options
    });
};

/**
 * Keeps alive an anonymous session identified by its ID.
 */
export const keepAliveAnonymousSession = <ThrowOnError extends boolean = false>(options: Options<KeepAliveAnonymousSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/chat/sessions/{sessionId}/keep-alive',
        ...options
    });
};

/**
 * Set the label of a session identified by its ID.
 */
export const setSessionLabel = <ThrowOnError extends boolean = false>(options: Options<SetSessionLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/chat/sessions/{sessionId}/label',
        ...options
    });
};

/**
 * Get all knowledge.
 */
export const getAllKnowledge = <ThrowOnError extends boolean = false>(options?: Options<GetAllKnowledgeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllKnowledgeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseTransformer: getAllKnowledgeResponseTransformer,
        url: '/rest/knowledge',
        ...options
    });
};

/**
 * Add a set of files to the knowledge.
 * If a file is empty, it is skipped.
 */
export const addFileSource = <ThrowOnError extends boolean = false>(options: Options<AddFileSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddFileSourceResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/add/file',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Retry the failed ingestion of a single knowledge identified by it ID.
 */
export const retryFailedIngestion = <ThrowOnError extends boolean = false>(options: Options<RetryFailedIngestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/retry/{id}/ingestion',
        ...options
    });
};

/**
 * Update the file source of a single knowledge identified by it ID.
 * If the file is empty, it is skipped.
 */
export const updateFileSource = <ThrowOnError extends boolean = false>(options: Options<UpdateFileSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/update/{id}/file',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete a single knowledge.
 */
export const deleteKnowledge = <ThrowOnError extends boolean = false>(options: Options<DeleteKnowledgeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}',
        ...options
    });
};

/**
 * Get a single knowledge.
 */
export const getKnowledge = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseTransformer: getKnowledgeResponseTransformer,
        url: '/rest/knowledge/{id}',
        ...options
    });
};

/**
 * Get the source file of a single knowledge.
 */
export const getKnowledgeFile = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeFileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}/file',
        ...options
    });
};

/**
 * Set the label of a single knowledge identified by its ID.
 */
export const setKnowledgeLabel = <ThrowOnError extends boolean = false>(options: Options<SetKnowledgeLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}/label',
        ...options
    });
};

/**
 * Remove a user's permissions from a single knowledge identified by its ID.
 */
export const removeKnowledgePermission = <ThrowOnError extends boolean = false>(options: Options<RemoveKnowledgePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}/permission/{username}',
        ...options
    });
};

/**
 * Set a user's permission for a single knowledge identified by its ID.
 */
export const setKnowledgePermission = <ThrowOnError extends boolean = false>(options: Options<SetKnowledgePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}/permission/{username}',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Remove a tag from a single knowledge identified by its ID.
 */
export const removeKnowledgeTag = <ThrowOnError extends boolean = false>(options: Options<RemoveKnowledgeTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}/tag',
        ...options
    });
};

/**
 * Add a tag to a single knowledge identified by its ID.
 */
export const addKnowledgeTag = <ThrowOnError extends boolean = false>(options: Options<AddKnowledgeTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/knowledge/{id}/tag',
        ...options
    });
};

/**
 * Delete all data for the user.
 */
export const deleteUserData = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/user',
        ...options
    });
};

/**
 * Login and get the user information based on the OIDC token.
 */
export const login = <ThrowOnError extends boolean = false>(options?: Options<LoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rest/user',
        ...options
    });
};