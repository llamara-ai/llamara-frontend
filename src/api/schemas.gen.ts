// This file is auto-generated by @hey-api/openapi-ts

export const ChatMessageRecordSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/ChatMessageType'
        },
        text: {
            type: 'string'
        },
        timestamp: {
            '$ref': '#/components/schemas/Instant'
        },
        sources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RagSourceRecord'
            }
        },
        modelUID: {
            type: 'string'
        }
    }
} as const;

export const ChatMessageTypeSchema = {
    type: 'string',
    enum: ['SYSTEM', 'USER', 'AI', 'TOOL_EXECUTION_RESULT', 'CUSTOM']
} as const;

export const ChatModelContainerSchema = {
    type: 'object',
    properties: {
        uid: {
            type: 'string'
        },
        label: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        provider: {
            '$ref': '#/components/schemas/ChatModelProvider'
        }
    }
} as const;

export const ChatModelProviderSchema = {
    type: 'string',
    enum: ['AZURE', 'GOOGLE_GEMINI', 'MISTRAL', 'OLLAMA', 'OPENAI']
} as const;

export const ChatResponseRecordSchema = {
    type: 'object',
    properties: {
        response: {
            type: 'string'
        },
        sources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RagSourceRecord'
            }
        }
    }
} as const;

export const InfoDTOSchema = {
    type: 'object',
    properties: {
        security: {
            '$ref': '#/components/schemas/SecurityInfoDTO'
        },
        oidc: {
            '$ref': '#/components/schemas/OidcInfoDTO'
        },
        imprintLink: {
            type: 'string'
        },
        privacyPolicyLink: {
            type: 'string'
        }
    }
} as const;

export const IngestionStatusSchema = {
    type: 'string',
    enum: ['PENDING', 'SUCCEEDED', 'FAILED']
} as const;

export const InstantSchema = {
    type: 'string',
    format: 'date-time',
    examples: ['2022-03-10T16:15:50Z']
} as const;

export const KnowledgeRecordSchema = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/KnowledgeType'
        },
        id: {
            '$ref': '#/components/schemas/UUID'
        },
        checksum: {
            type: 'string'
        },
        ingestionStatus: {
            '$ref': '#/components/schemas/IngestionStatus'
        },
        tokenCount: {
            type: 'integer',
            format: 'int32'
        },
        createdAt: {
            '$ref': '#/components/schemas/Instant'
        },
        lastUpdatedAt: {
            '$ref': '#/components/schemas/Instant'
        },
        contentType: {
            type: 'string'
        },
        permissions: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Permission'
            }
        },
        label: {
            type: 'string'
        },
        tags: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        },
        source: {
            type: 'string',
            format: 'uri'
        }
    }
} as const;

export const KnowledgeTypeSchema = {
    type: 'string',
    enum: ['FILE', 'WEBLINK']
} as const;

export const OidcInfoDTOSchema = {
    type: 'object',
    properties: {
        authServerUrl: {
            type: 'string'
        },
        clientId: {
            type: 'string'
        },
        authorizationPath: {
            type: 'string'
        },
        logoutPath: {
            type: 'string'
        },
        tokenPath: {
            type: 'string'
        },
        audience: {
            type: 'string'
        }
    }
} as const;

export const PermissionSchema = {
    type: 'string',
    enum: ['OWNER', 'READWRITE', 'READONLY', 'NONE']
} as const;

export const RagSourceRecordSchema = {
    type: 'object',
    properties: {
        knowledgeId: {
            '$ref': '#/components/schemas/UUID'
        },
        embeddingId: {
            '$ref': '#/components/schemas/UUID'
        },
        page: {
            type: 'integer',
            format: 'int32'
        },
        content: {
            type: 'string'
        }
    }
} as const;

export const SecurityInfoDTOSchema = {
    type: 'object',
    properties: {
        anonymousUserEnabled: {
            type: 'boolean'
        },
        anonymousUserSessionTimeout: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const SessionSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/UUID'
        },
        createdAt: {
            '$ref': '#/components/schemas/Instant'
        },
        label: {
            type: 'string'
        }
    }
} as const;

export const UUIDSchema = {
    type: 'string',
    format: 'uuid',
    pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
} as const;

export const UserInfoDTOSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        roles: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        },
        anonymous: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        }
    }
} as const;
