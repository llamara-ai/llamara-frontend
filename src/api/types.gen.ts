// This file is auto-generated by @hey-api/openapi-ts

export interface ChatMessageRecord {
    type?: ChatMessageType;
    text?: string;
    timestamp?: Instant;
    sources?: RagSourceRecord[];
    modelUID?: string;
}

export const ChatMessageType = {
    SYSTEM: 'SYSTEM',
    USER: 'USER',
    AI: 'AI',
    TOOL_EXECUTION_RESULT: 'TOOL_EXECUTION_RESULT',
    CUSTOM: 'CUSTOM'
} as const;

export type ChatMessageType = typeof ChatMessageType[keyof typeof ChatMessageType];

export interface ChatModelContainer {
    uid?: string;
    label?: string;
    description?: string;
    provider?: ChatModelProvider;
}

export const ChatModelProvider = {
    AZURE: 'AZURE',
    GOOGLE_GEMINI: 'GOOGLE_GEMINI',
    MISTRAL: 'MISTRAL',
    OLLAMA: 'OLLAMA',
    OPENAI: 'OPENAI'
} as const;

export type ChatModelProvider = typeof ChatModelProvider[keyof typeof ChatModelProvider];

export interface ChatResponseRecord {
    response?: string;
    sources?: RagSourceRecord[];
}

export interface InfoDto {
    security?: SecurityInfoDto;
    oidc?: OidcInfoDto;
    imprintLink?: string;
    privacyPolicyLink?: string;
}

export const IngestionStatus = {
    PENDING: 'PENDING',
    SUCCEEDED: 'SUCCEEDED',
    FAILED: 'FAILED'
} as const;

export type IngestionStatus = typeof IngestionStatus[keyof typeof IngestionStatus];

export type Instant = Date;

export interface KnowledgeRecord {
    type?: KnowledgeType;
    id?: Uuid;
    checksum?: string;
    ingestionStatus?: IngestionStatus;
    tokenCount?: number;
    createdAt?: Instant;
    lastUpdatedAt?: Instant;
    contentType?: string;
    permissions?: Record<string, Permission>;
    label?: string;
    tags?: string[];
    source?: string;
}

export const KnowledgeType = {
    FILE: 'FILE',
    WEBLINK: 'WEBLINK'
} as const;

export type KnowledgeType = typeof KnowledgeType[keyof typeof KnowledgeType];

export interface OidcInfoDto {
    authServerUrl?: string;
    clientId?: string;
    authorizationPath?: string;
    logoutPath?: string;
    tokenPath?: string;
    audience?: string;
}

export const Permission = {
    OWNER: 'OWNER',
    READWRITE: 'READWRITE',
    READONLY: 'READONLY',
    NONE: 'NONE'
} as const;

export type Permission = typeof Permission[keyof typeof Permission];

export interface RagSourceRecord {
    knowledgeId?: Uuid;
    embeddingId?: Uuid;
    page?: number;
    content?: string;
}

export interface SecurityInfoDto {
    anonymousUserEnabled?: boolean;
    anonymousUserSessionTimeout?: number;
}

export interface Session {
    id?: Uuid;
    createdAt?: Instant;
    label?: string;
}

export type Uuid = string;

export interface UserInfoDto {
    username?: string;
    roles?: string[];
    anonymous?: boolean;
    name?: string;
}

export interface ConfigurationData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest';
}

export interface ConfigurationResponses {
    /**
     * OK
     */
    200: InfoDto;
}

export type ConfigurationResponse = ConfigurationResponses[keyof ConfigurationResponses];

export interface GetModelsData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest/chat/models';
}

export interface GetModelsErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface GetModelsResponses {
    /**
     * OK
     */
    200: ChatModelContainer[];
}

export type GetModelsResponse = GetModelsResponses[keyof GetModelsResponses];

export interface PromptData {
    body: string;
    path?: never;
    query: {
        /**
         * ID of the session to use
         */
        sessionId: Uuid;
        /**
         * UID of the chat model to use
         */
        uid: string;
    };
    url: '/rest/chat/prompt';
}

export interface PromptErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No chat model or no session with given ID found.
     */
    404: unknown;
}

export interface PromptResponses {
    /**
     * OK
     */
    200: ChatResponseRecord;
}

export type PromptResponse = PromptResponses[keyof PromptResponses];

export interface GetSessionsData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest/chat/sessions';
}

export interface GetSessionsErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface GetSessionsResponses {
    /**
     * OK
     */
    200: Session[];
}

export type GetSessionsResponse = GetSessionsResponses[keyof GetSessionsResponses];

export interface CreateSessionData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest/chat/sessions/create';
}

export interface CreateSessionErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface CreateSessionResponses {
    /**
     * Created
     */
    201: Session;
}

export type CreateSessionResponse = CreateSessionResponses[keyof CreateSessionResponses];

export interface DeleteSessionData {
    body?: never;
    path: {
        sessionId: Uuid;
    };
    query?: never;
    url: '/rest/chat/sessions/{sessionId}';
}

export interface DeleteSessionErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No session with the given ID found.
     */
    404: unknown;
}

export interface DeleteSessionResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface GetHistoryData {
    body?: never;
    path: {
        /**
         * UID of the chat history to get
         */
        sessionId: Uuid;
    };
    query?: never;
    url: '/rest/chat/sessions/{sessionId}/history';
}

export interface GetHistoryErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No session with the given ID found.
     */
    404: unknown;
}

export interface GetHistoryResponses {
    /**
     * OK
     */
    200: ChatMessageRecord[];
}

export type GetHistoryResponse = GetHistoryResponses[keyof GetHistoryResponses];

export interface KeepAliveAnonymousSessionData {
    body?: never;
    path: {
        /**
         * UID of the session to keep alive
         */
        sessionId: Uuid;
    };
    query?: never;
    url: '/rest/chat/sessions/{sessionId}/keep-alive';
}

export interface KeepAliveAnonymousSessionErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No session with the given ID found.
     */
    404: unknown;
}

export interface KeepAliveAnonymousSessionResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface SetSessionLabelData {
    body?: never;
    path: {
        /**
         * UID of the session to set the label for
         */
        sessionId: Uuid;
    };
    query: {
        /**
         * session label to set
         */
        label: string;
    };
    url: '/rest/chat/sessions/{sessionId}/label';
}

export interface SetSessionLabelErrors {
    /**
     * Bad Request, usually returned when an operation is requested before the user has logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No session with the given ID found.
     */
    404: unknown;
}

export interface SetSessionLabelResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface GetAllKnowledgeData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest/knowledge';
}

export interface GetAllKnowledgeErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface GetAllKnowledgeResponses {
    /**
     * OK
     */
    200: KnowledgeRecord[];
}

export type GetAllKnowledgeResponse = GetAllKnowledgeResponses[keyof GetAllKnowledgeResponses];

export interface AddFileSourceData {
    body: {
        files?: (Blob | File)[];
    };
    path?: never;
    query?: never;
    url: '/rest/knowledge/add/file';
}

export interface AddFileSourceErrors {
    /**
     * File upload is invalid.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface AddFileSourceResponses {
    /**
     * OK. Returns the ids of the added knowledge.
     */
    201: Uuid[];
}

export type AddFileSourceResponse = AddFileSourceResponses[keyof AddFileSourceResponses];

export interface RetryFailedIngestionData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to retry the ingestion for
         */
        id: Uuid;
    };
    query?: never;
    url: '/rest/knowledge/retry/{id}/ingestion';
}

export interface RetryFailedIngestionErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface RetryFailedIngestionResponses {
    /**
     * OK.
     */
    200: unknown;
}

export interface UpdateFileSourceData {
    body: {
        file?: Blob | File;
    };
    path: {
        /**
         * UID of the knowledge to update
         */
        id: Uuid;
    };
    query?: never;
    url: '/rest/knowledge/update/{id}/file';
}

export interface UpdateFileSourceErrors {
    /**
     * File upload is invalid.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface UpdateFileSourceResponses {
    /**
     * OK.
     */
    200: unknown;
}

export interface DeleteKnowledgeData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to delete
         */
        id: Uuid;
    };
    query?: never;
    url: '/rest/knowledge/{id}';
}

export interface DeleteKnowledgeErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface DeleteKnowledgeResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface GetKnowledgeData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to get
         */
        id: Uuid;
    };
    query?: never;
    url: '/rest/knowledge/{id}';
}

export interface GetKnowledgeErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface GetKnowledgeResponses {
    /**
     * OK
     */
    200: KnowledgeRecord;
}

export type GetKnowledgeResponse = GetKnowledgeResponses[keyof GetKnowledgeResponses];

export interface GetKnowledgeFileData {
    body?: never;
    headers?: {
        'If-None-Match'?: string;
    };
    path: {
        /**
         * UID of the knowledge to get the source file of
         */
        id: Uuid;
    };
    query?: never;
    url: '/rest/knowledge/{id}/file';
}

export interface GetKnowledgeFileErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface GetKnowledgeFileResponses {
    /**
     * OK
     */
    200: Blob | File;
}

export type GetKnowledgeFileResponse = GetKnowledgeFileResponses[keyof GetKnowledgeFileResponses];

export interface SetKnowledgeLabelData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to set the label for
         */
        id: Uuid;
    };
    query: {
        /**
         * the knowledge label to set
         */
        label: string;
    };
    url: '/rest/knowledge/{id}/label';
}

export interface SetKnowledgeLabelErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface SetKnowledgeLabelResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface RemoveKnowledgePermissionData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to remove the permission from
         */
        id: Uuid;
        /**
         * name of user to remove permission for
         */
        username: string;
    };
    query?: never;
    url: '/rest/knowledge/{id}/permission/{username}';
}

export interface RemoveKnowledgePermissionErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found or no user with the given username found.
     */
    404: unknown;
}

export interface RemoveKnowledgePermissionResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface SetKnowledgePermissionData {
    /**
     * permission to set
     */
    body: 'READWRITE' | 'READONLY';
    path: {
        /**
         * UID of the knowledge set permission for
         */
        id: Uuid;
        /**
         * name of user to set permission for
         */
        username: string;
    };
    query?: never;
    url: '/rest/knowledge/{id}/permission/{username}';
}

export interface SetKnowledgePermissionErrors {
    /**
     * Illegal permission modification
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found or no user with the given username found.
     */
    404: unknown;
}

export interface SetKnowledgePermissionResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface RemoveKnowledgeTagData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to which the tag should be removed
         */
        id: Uuid;
    };
    query: {
        /**
         * tag to remove
         */
        tag: string;
    };
    url: '/rest/knowledge/{id}/tag';
}

export interface RemoveKnowledgeTagErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface RemoveKnowledgeTagResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface AddKnowledgeTagData {
    body?: never;
    path: {
        /**
         * UID of the knowledge to which the tag should be added
         */
        id: Uuid;
    };
    query: {
        /**
         * tag to add
         */
        tag: string;
    };
    url: '/rest/knowledge/{id}/tag';
}

export interface AddKnowledgeTagErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
    /**
     * No knowledge with the given id found.
     */
    404: unknown;
}

export interface AddKnowledgeTagResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface DeleteUserDataData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest/user';
}

export interface DeleteUserDataErrors {
    /**
     * Bad Request. Returned when an operation is requested before the user is logged in.
     */
    400: unknown;
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface DeleteUserDataResponses {
    /**
     * OK
     */
    200: unknown;
}

export interface LoginData {
    body?: never;
    path?: never;
    query?: never;
    url: '/rest/user';
}

export interface LoginErrors {
    /**
     * Not Authorized
     */
    401: unknown;
    /**
     * Not Allowed
     */
    403: unknown;
}

export interface LoginResponses {
    /**
     * OK
     */
    200: UserInfoDto;
}

export type LoginResponse = LoginResponses[keyof LoginResponses];

export interface ClientOptions {
    baseUrl: 'http://localhost:8080' | 'http://0.0.0.0:8080' | (string & {});
}
